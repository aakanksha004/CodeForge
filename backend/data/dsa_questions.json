[
    {
      "title": "Two Sum",
      "description": "Given an array of integers, return the indices of the two numbers such that they add up to a specific target.",
      "input": "An array of integers and a target integer.",
      "output": "Indices of the two numbers that add up to the target.",
      "testCases": [
        {
          "input": "[2, 7, 11, 15], 9",
          "expectedOutput": "[0, 1]"
        },
        {
          "input": "[3, 2, 4], 6",
          "expectedOutput": "[1, 2]"
        },
        {
          "input": "[5, 3, 7, 8], 10",
          "expectedOutput": "[2, 3]"
        },
        {
          "input": "[1, 2, 3, 4], 5",
          "expectedOutput": "[0, 3]"
        }
      ],
      "constraints": "Each input would have exactly one solution. You may not use the same element twice.",
      "tags": ["Array", "Hash Table"],
      "difficulty": "Easy"
    },
    {
      "title": "Reverse Linked List",
      "description": "Reverse a singly linked list.",
      "input": "A singly linked list.",
      "output": "The reversed singly linked list.",
      "testCases": [
        {
          "input": "[1, 2, 3, 4, 5]",
          "expectedOutput": "[5, 4, 3, 2, 1]"
        },
        {
          "input": "[1, 2, 3]",
          "expectedOutput": "[3, 2, 1]"
        },
        {
          "input": "[7, 8]",
          "expectedOutput": "[8, 7]"
        }
      ],
      "constraints": "The list is guaranteed to have at least one element.",
      "tags": ["Linked List"],
      "difficulty": "Easy"
    },
    {
      "title": "Find the Missing Number",
      "description": "Given an array of n-1 integers, where each integer is between 1 and n, find the missing number.",
      "input": "An array of n-1 integers.",
      "output": "The missing number.",
      "testCases": [
        {
          "input": "[1, 2, 4, 5, 6]",
          "expectedOutput": "3"
        },
        {
          "input": "[7, 1, 2, 3, 4, 5, 6]",
          "expectedOutput": "8"
        },
        {
          "input": "[1, 3, 4], 5",
          "expectedOutput": "2"
        }
      ],
      "constraints": "The integers in the array are unique and the missing number is within the range.",
      "tags": ["Array", "Mathematics"],
      "difficulty": "Easy"
    },
    {
      "title": "Palindrome String",
      "description": "Check whether a string is a palindrome.",
      "input": "A string.",
      "output": "True if the string is a palindrome, false otherwise.",
      "testCases": [
        {
          "input": "'madam'",
          "expectedOutput": "True"
        },
        {
          "input": "'hello'",
          "expectedOutput": "False"
        },
        {
          "input": "'racecar'",
          "expectedOutput": "True"
        },
        {
          "input": "'world'",
          "expectedOutput": "False"
        }
      ],
      "constraints": "The string will only contain alphanumeric characters.",
      "tags": ["String", "Two Pointers"],
      "difficulty": "Easy"
    },
    {
      "title": "Binary Search",
      "description": "Implement binary search on a sorted array.",
      "input": "A sorted array and a target value.",
      "output": "The index of the target value or -1 if not found.",
      "testCases": [
        {
          "input": "[1, 2, 3, 4, 5], 3",
          "expectedOutput": "2"
        },
        {
          "input": "[1, 2, 3, 4, 5], 6",
          "expectedOutput": "-1"
        },
        {
          "input": "[2, 4, 6, 8, 10], 8",
          "expectedOutput": "3"
        },
        {
          "input": "[1, 3, 5, 7], 5",
          "expectedOutput": "2"
        }
      ],
      "constraints": "The input array is sorted in ascending order.",
      "tags": ["Array", "Binary Search"],
      "difficulty": "Easy"
    },
    {
      "title": "Max Subarray Sum",
      "description": "Find the contiguous subarray within an array that has the largest sum.",
      "input": "An array of integers.",
      "output": "The largest sum of a contiguous subarray.",
      "testCases": [
        {
          "input": "[1, -2, 3, 4, -1, 2, 1, -5, 4]",
          "expectedOutput": "6"
        },
        {
          "input": "[-1, -2, -3, -4]",
          "expectedOutput": "-1"
        },
        {
          "input": "[5, 3, -1, 2]",
          "expectedOutput": "9"
        },
        {
          "input": "[-5, -4, -3, -2, -1]",
          "expectedOutput": "-1"
        }
      ],
      "constraints": "The array has at least one element.",
      "tags": ["Array", "Dynamic Programming"],
      "difficulty": "Medium"
    },
    {
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists into one sorted linked list.",
      "input": "Two sorted linked lists.",
      "output": "A sorted linked list.",
      "testCases": [
        {
          "input": "[1, 2, 4], [1, 3, 4]",
          "expectedOutput": "[1, 1, 2, 3, 4, 4]"
        },
        {
          "input": "[1, 5], [2, 4]",
          "expectedOutput": "[1, 2, 4, 5]"
        }
      ],
      "constraints": "The input lists are sorted in non-decreasing order.",
      "tags": ["Linked List", "Merge"],
      "difficulty": "Medium"
    },
    {
      "title": "Find Duplicates in Array",
      "description": "Find all duplicate elements in an array.",
      "input": "An array of integers.",
      "output": "A list of duplicate elements.",
      "testCases": [
        {
          "input": "[1, 2, 3, 1, 2, 4]",
          "expectedOutput": "[1, 2]"
        },
        {
          "input": "[5, 6, 7, 5, 6, 8]",
          "expectedOutput": "[5, 6]"
        }
      ],
      "constraints": "The input array may contain duplicate elements.",
      "tags": ["Array", "Hash Set"],
      "difficulty": "Medium"
    },
    {
      "title": "Longest Substring Without Repeating Characters",
      "description": "Find the length of the longest substring without repeating characters.",
      "input": "A string.",
      "output": "The length of the longest substring.",
      "testCases": [
        {
          "input": "'abcabcbb'",
          "expectedOutput": "3"
        },
        {
          "input": "'bbbbb'",
          "expectedOutput": "1"
        },
        {
          "input": "'pwwkew'",
          "expectedOutput": "3"
        }
      ],
      "constraints": "The input string is non-empty.",
      "tags": ["String", "Sliding Window"],
      "difficulty": "Medium"
    },
    {
      "title": "Valid Parentheses",
      "description": "Check if a given string containing parentheses is valid.",
      "input": "A string containing parentheses.",
      "output": "True if the string is valid, false otherwise.",
      "testCases": [
        {
          "input": "'()[]{}'",
          "expectedOutput": "True"
        },
        {
          "input": "'([)]'",
          "expectedOutput": "False"
        },
        {
          "input": "'(){}[]'",
          "expectedOutput": "True"
        }
      ],
      "constraints": "The string only contains characters '(', ')', '[', ']', '{', '}'.",
      "tags": ["Stack", "String"],
      "difficulty": "Easy"
    },

       
    
        {
          "title": "Fibonacci Sequence",
          "description": "Generate the nth Fibonacci number.",
          "input": "An integer n.",
          "output": "The nth Fibonacci number.",
          "testCases": [
            {
              "input": "5",
              "expectedOutput": "5"
            },
            {
              "input": "10",
              "expectedOutput": "55"
            },
            {
              "input": "15",
              "expectedOutput": "610"
            },
            {
              "input": "20",
              "expectedOutput": "6765"
            },
            {
              "input": "25",
              "expectedOutput": "75025"
            }
          ],
          "constraints": "The input integer n is between 0 and 30.",
          "tags": ["Recursion", "Dynamic Programming"],
          "difficulty": "Easy"
        },
        {
          "title": "Count Primes",
          "description": "Count the number of prime numbers less than a given number n.",
          "input": "An integer n.",
          "output": "The number of primes less than n.",
          "testCases": [
            {
              "input": "10",
              "expectedOutput": "4"
            },
            {
              "input": "20",
              "expectedOutput": "8"
            },
            {
              "input": "50",
              "expectedOutput": "15"
            },
            {
              "input": "100",
              "expectedOutput": "25"
            },
            {
              "input": "1000",
              "expectedOutput": "168"
            }
          ],
          "constraints": "The input n is between 0 and 10^6.",
          "tags": ["Math", "Sieve of Eratosthenes"],
          "difficulty": "Medium"
        },
        {
          "title": "Longest Common Prefix",
          "description": "Find the longest common prefix string among an array of strings.",
          "input": "An array of strings.",
          "output": "The longest common prefix.",
          "testCases": [
            {
              "input": "['flower', 'flow', 'flight']",
              "expectedOutput": "'fl'"
            },
            {
              "input": "['dog', 'racecar', 'car']",
              "expectedOutput": "''"
            },
            {
              "input": "['interview', 'internet', 'intermediate']",
              "expectedOutput": "'inter'"
            },
            {
              "input": "['apple', 'ape', 'april']",
              "expectedOutput": "'ap'"
            },
            {
              "input": "['cat', 'car', 'cart']",
              "expectedOutput": "'ca'"
            }
          ],
          "constraints": "All strings in the array are non-empty.",
          "tags": ["String"],
          "difficulty": "Easy"
        },
        {
          "title": "Spiral Matrix",
          "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
          "input": "A 2D matrix of integers.",
          "output": "A list of integers in spiral order.",
          "testCases": [
            {
              "input": "[[1,2,3],[4,5,6],[7,8,9]]",
              "expectedOutput": "[1, 2, 3, 6, 9, 8, 7, 4, 5]"
            },
            {
              "input": "[[1,2],[3,4]]",
              "expectedOutput": "[1, 2, 4, 3]"
            },
            {
              "input": "[[1]]",
              "expectedOutput": "[1]"
            },
            {
              "input": "[[1,2,3],[4,5,6]]",
              "expectedOutput": "[1, 2, 3, 6, 5, 4]"
            },
            {
              "input": "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
              "expectedOutput": "[1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]"
            }
          ],
          "constraints": "m and n are between 1 and 10^4.",
          "tags": ["Matrix", "Array"],
          "difficulty": "Medium"
        },
        {
          "title": "Remove Duplicates from Sorted Array",
          "description": "Remove duplicates from a sorted array in-place, and return the new length.",
          "input": "A sorted array of integers.",
          "output": "The new length of the array after duplicates have been removed.",
          "testCases": [
            {
              "input": "[1, 1, 2]",
              "expectedOutput": "2"
            },
            {
              "input": "[0,0,1,1,1,2,2,3,3,4]",
              "expectedOutput": "5"
            },
            {
              "input": "[1, 1, 1, 1, 1]",
              "expectedOutput": "1"
            },
            {
              "input": "[1, 2, 3, 4, 5]",
              "expectedOutput": "5"
            }
          ],
          "constraints": "The array is sorted in non-decreasing order.",
          "tags": ["Array", "Two Pointers"],
          "difficulty": "Easy"
        },
        {
          "title": "Top K Frequent Elements",
          "description": "Given a non-empty array of integers, return the k most frequent elements.",
          "input": "An array of integers and a number k.",
          "output": "The k most frequent elements in the array.",
          "testCases": [
            {
              "input": "[1,1,1,2,2,3], 2",
              "expectedOutput": "[1, 2]"
            },
            {
              "input": "[4,4,4,5,5,6], 1",
              "expectedOutput": "[4]"
            },
            {
              "input": "[1,1,2,2,3,3,3], 2",
              "expectedOutput": "[3, 2]"
            },
            {
              "input": "[7,7,8,8,8,9], 3",
              "expectedOutput": "[8, 7, 9]"
            }
          ],
          "constraints": "The input array has at least one element.",
          "tags": ["Hash Map", "Heap"],
          "difficulty": "Medium"
        }
    ]
      
      